// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package user_service

import (
	"context"

	"ep.k16/newsfeed/internal/service/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserDAI creates a new instance of MockUserDAI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserDAI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserDAI {
	mock := &MockUserDAI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserDAI is an autogenerated mock type for the UserDAI type
type MockUserDAI struct {
	mock.Mock
}

type MockUserDAI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserDAI) EXPECT() *MockUserDAI_Expecter {
	return &MockUserDAI_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUserDAI
func (_mock *MockUserDAI) Create(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserDAI_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserDAI_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUserDAI_Expecter) Create(ctx interface{}, user interface{}) *MockUserDAI_Create_Call {
	return &MockUserDAI_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserDAI_Create_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserDAI_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserDAI_Create_Call) Return(user1 *model.User, err error) *MockUserDAI_Create_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserDAI_Create_Call) RunAndReturn(run func(ctx context.Context, user *model.User) (*model.User, error)) *MockUserDAI_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Follow provides a mock function for the type MockUserDAI
func (_mock *MockUserDAI) Follow(ctx context.Context, userId int64, peerId int64) (*model.Follow, error) {
	ret := _mock.Called(ctx, userId, peerId)

	if len(ret) == 0 {
		panic("no return value specified for Follow")
	}

	var r0 *model.Follow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) (*model.Follow, error)); ok {
		return returnFunc(ctx, userId, peerId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) *model.Follow); ok {
		r0 = returnFunc(ctx, userId, peerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Follow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = returnFunc(ctx, userId, peerId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserDAI_Follow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Follow'
type MockUserDAI_Follow_Call struct {
	*mock.Call
}

// Follow is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - peerId int64
func (_e *MockUserDAI_Expecter) Follow(ctx interface{}, userId interface{}, peerId interface{}) *MockUserDAI_Follow_Call {
	return &MockUserDAI_Follow_Call{Call: _e.mock.On("Follow", ctx, userId, peerId)}
}

func (_c *MockUserDAI_Follow_Call) Run(run func(ctx context.Context, userId int64, peerId int64)) *MockUserDAI_Follow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserDAI_Follow_Call) Return(follow *model.Follow, err error) *MockUserDAI_Follow_Call {
	_c.Call.Return(follow, err)
	return _c
}

func (_c *MockUserDAI_Follow_Call) RunAndReturn(run func(ctx context.Context, userId int64, peerId int64) (*model.Follow, error)) *MockUserDAI_Follow_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockUserDAI
func (_mock *MockUserDAI) GetByID(ctx context.Context, userId int64) (*model.User, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*model.User, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserDAI_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserDAI_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
func (_e *MockUserDAI_Expecter) GetByID(ctx interface{}, userId interface{}) *MockUserDAI_GetByID_Call {
	return &MockUserDAI_GetByID_Call{Call: _e.mock.On("GetByID", ctx, userId)}
}

func (_c *MockUserDAI_GetByID_Call) Run(run func(ctx context.Context, userId int64)) *MockUserDAI_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserDAI_GetByID_Call) Return(user *model.User, err error) *MockUserDAI_GetByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserDAI_GetByID_Call) RunAndReturn(run func(ctx context.Context, userId int64) (*model.User, error)) *MockUserDAI_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsername provides a mock function for the type MockUserDAI
func (_mock *MockUserDAI) GetByUsername(ctx context.Context, username string) (*model.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsername")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserDAI_GetByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsername'
type MockUserDAI_GetByUsername_Call struct {
	*mock.Call
}

// GetByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserDAI_Expecter) GetByUsername(ctx interface{}, username interface{}) *MockUserDAI_GetByUsername_Call {
	return &MockUserDAI_GetByUsername_Call{Call: _e.mock.On("GetByUsername", ctx, username)}
}

func (_c *MockUserDAI_GetByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserDAI_GetByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserDAI_GetByUsername_Call) Return(user *model.User, err error) *MockUserDAI_GetByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserDAI_GetByUsername_Call) RunAndReturn(run func(ctx context.Context, username string) (*model.User, error)) *MockUserDAI_GetByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowers provides a mock function for the type MockUserDAI
func (_mock *MockUserDAI) GetFollowers(ctx context.Context, userId int64, paging *model.Paging) ([]*model.Follow, error) {
	ret := _mock.Called(ctx, userId, paging)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowers")
	}

	var r0 []*model.Follow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *model.Paging) ([]*model.Follow, error)); ok {
		return returnFunc(ctx, userId, paging)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *model.Paging) []*model.Follow); ok {
		r0 = returnFunc(ctx, userId, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Follow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, *model.Paging) error); ok {
		r1 = returnFunc(ctx, userId, paging)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserDAI_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type MockUserDAI_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - paging *model.Paging
func (_e *MockUserDAI_Expecter) GetFollowers(ctx interface{}, userId interface{}, paging interface{}) *MockUserDAI_GetFollowers_Call {
	return &MockUserDAI_GetFollowers_Call{Call: _e.mock.On("GetFollowers", ctx, userId, paging)}
}

func (_c *MockUserDAI_GetFollowers_Call) Run(run func(ctx context.Context, userId int64, paging *model.Paging)) *MockUserDAI_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *model.Paging
		if args[2] != nil {
			arg2 = args[2].(*model.Paging)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserDAI_GetFollowers_Call) Return(follows []*model.Follow, err error) *MockUserDAI_GetFollowers_Call {
	_c.Call.Return(follows, err)
	return _c
}

func (_c *MockUserDAI_GetFollowers_Call) RunAndReturn(run func(ctx context.Context, userId int64, paging *model.Paging) ([]*model.Follow, error)) *MockUserDAI_GetFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowings provides a mock function for the type MockUserDAI
func (_mock *MockUserDAI) GetFollowings(ctx context.Context, userId int64, paging *model.Paging) ([]*model.Follow, error) {
	ret := _mock.Called(ctx, userId, paging)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowings")
	}

	var r0 []*model.Follow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *model.Paging) ([]*model.Follow, error)); ok {
		return returnFunc(ctx, userId, paging)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *model.Paging) []*model.Follow); ok {
		r0 = returnFunc(ctx, userId, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Follow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, *model.Paging) error); ok {
		r1 = returnFunc(ctx, userId, paging)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserDAI_GetFollowings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowings'
type MockUserDAI_GetFollowings_Call struct {
	*mock.Call
}

// GetFollowings is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - paging *model.Paging
func (_e *MockUserDAI_Expecter) GetFollowings(ctx interface{}, userId interface{}, paging interface{}) *MockUserDAI_GetFollowings_Call {
	return &MockUserDAI_GetFollowings_Call{Call: _e.mock.On("GetFollowings", ctx, userId, paging)}
}

func (_c *MockUserDAI_GetFollowings_Call) Run(run func(ctx context.Context, userId int64, paging *model.Paging)) *MockUserDAI_GetFollowings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *model.Paging
		if args[2] != nil {
			arg2 = args[2].(*model.Paging)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserDAI_GetFollowings_Call) Return(follows []*model.Follow, err error) *MockUserDAI_GetFollowings_Call {
	_c.Call.Return(follows, err)
	return _c
}

func (_c *MockUserDAI_GetFollowings_Call) RunAndReturn(run func(ctx context.Context, userId int64, paging *model.Paging) ([]*model.Follow, error)) *MockUserDAI_GetFollowings_Call {
	_c.Call.Return(run)
	return _c
}

// Unfollow provides a mock function for the type MockUserDAI
func (_mock *MockUserDAI) Unfollow(ctx context.Context, userId int64, peerId int64) error {
	ret := _mock.Called(ctx, userId, peerId)

	if len(ret) == 0 {
		panic("no return value specified for Unfollow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = returnFunc(ctx, userId, peerId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserDAI_Unfollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unfollow'
type MockUserDAI_Unfollow_Call struct {
	*mock.Call
}

// Unfollow is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - peerId int64
func (_e *MockUserDAI_Expecter) Unfollow(ctx interface{}, userId interface{}, peerId interface{}) *MockUserDAI_Unfollow_Call {
	return &MockUserDAI_Unfollow_Call{Call: _e.mock.On("Unfollow", ctx, userId, peerId)}
}

func (_c *MockUserDAI_Unfollow_Call) Run(run func(ctx context.Context, userId int64, peerId int64)) *MockUserDAI_Unfollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserDAI_Unfollow_Call) Return(err error) *MockUserDAI_Unfollow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserDAI_Unfollow_Call) RunAndReturn(run func(ctx context.Context, userId int64, peerId int64) error) *MockUserDAI_Unfollow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserCacheDAI creates a new instance of MockUserCacheDAI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserCacheDAI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserCacheDAI {
	mock := &MockUserCacheDAI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserCacheDAI is an autogenerated mock type for the UserCacheDAI type
type MockUserCacheDAI struct {
	mock.Mock
}

type MockUserCacheDAI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserCacheDAI) EXPECT() *MockUserCacheDAI_Expecter {
	return &MockUserCacheDAI_Expecter{mock: &_m.Mock}
}

// AddCachedFollow provides a mock function for the type MockUserCacheDAI
func (_mock *MockUserCacheDAI) AddCachedFollow(ctx context.Context, follow *model.Follow) error {
	ret := _mock.Called(ctx, follow)

	if len(ret) == 0 {
		panic("no return value specified for AddCachedFollow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Follow) error); ok {
		r0 = returnFunc(ctx, follow)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserCacheDAI_AddCachedFollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCachedFollow'
type MockUserCacheDAI_AddCachedFollow_Call struct {
	*mock.Call
}

// AddCachedFollow is a helper method to define mock.On call
//   - ctx context.Context
//   - follow *model.Follow
func (_e *MockUserCacheDAI_Expecter) AddCachedFollow(ctx interface{}, follow interface{}) *MockUserCacheDAI_AddCachedFollow_Call {
	return &MockUserCacheDAI_AddCachedFollow_Call{Call: _e.mock.On("AddCachedFollow", ctx, follow)}
}

func (_c *MockUserCacheDAI_AddCachedFollow_Call) Run(run func(ctx context.Context, follow *model.Follow)) *MockUserCacheDAI_AddCachedFollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Follow
		if args[1] != nil {
			arg1 = args[1].(*model.Follow)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserCacheDAI_AddCachedFollow_Call) Return(err error) *MockUserCacheDAI_AddCachedFollow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserCacheDAI_AddCachedFollow_Call) RunAndReturn(run func(ctx context.Context, follow *model.Follow) error) *MockUserCacheDAI_AddCachedFollow_Call {
	_c.Call.Return(run)
	return _c
}

// GetCachedUserByID provides a mock function for the type MockUserCacheDAI
func (_mock *MockUserCacheDAI) GetCachedUserByID(ctx context.Context, userId int64) (*model.User, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetCachedUserByID")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*model.User, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *model.User); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserCacheDAI_GetCachedUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCachedUserByID'
type MockUserCacheDAI_GetCachedUserByID_Call struct {
	*mock.Call
}

// GetCachedUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
func (_e *MockUserCacheDAI_Expecter) GetCachedUserByID(ctx interface{}, userId interface{}) *MockUserCacheDAI_GetCachedUserByID_Call {
	return &MockUserCacheDAI_GetCachedUserByID_Call{Call: _e.mock.On("GetCachedUserByID", ctx, userId)}
}

func (_c *MockUserCacheDAI_GetCachedUserByID_Call) Run(run func(ctx context.Context, userId int64)) *MockUserCacheDAI_GetCachedUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserCacheDAI_GetCachedUserByID_Call) Return(user *model.User, err error) *MockUserCacheDAI_GetCachedUserByID_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserCacheDAI_GetCachedUserByID_Call) RunAndReturn(run func(ctx context.Context, userId int64) (*model.User, error)) *MockUserCacheDAI_GetCachedUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowings provides a mock function for the type MockUserCacheDAI
func (_mock *MockUserCacheDAI) GetFollowings(ctx context.Context, userId int64, paging *model.Paging) ([]*model.Follow, error) {
	ret := _mock.Called(ctx, userId, paging)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowings")
	}

	var r0 []*model.Follow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *model.Paging) ([]*model.Follow, error)); ok {
		return returnFunc(ctx, userId, paging)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *model.Paging) []*model.Follow); ok {
		r0 = returnFunc(ctx, userId, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Follow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, *model.Paging) error); ok {
		r1 = returnFunc(ctx, userId, paging)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserCacheDAI_GetFollowings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowings'
type MockUserCacheDAI_GetFollowings_Call struct {
	*mock.Call
}

// GetFollowings is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - paging *model.Paging
func (_e *MockUserCacheDAI_Expecter) GetFollowings(ctx interface{}, userId interface{}, paging interface{}) *MockUserCacheDAI_GetFollowings_Call {
	return &MockUserCacheDAI_GetFollowings_Call{Call: _e.mock.On("GetFollowings", ctx, userId, paging)}
}

func (_c *MockUserCacheDAI_GetFollowings_Call) Run(run func(ctx context.Context, userId int64, paging *model.Paging)) *MockUserCacheDAI_GetFollowings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *model.Paging
		if args[2] != nil {
			arg2 = args[2].(*model.Paging)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserCacheDAI_GetFollowings_Call) Return(follows []*model.Follow, err error) *MockUserCacheDAI_GetFollowings_Call {
	_c.Call.Return(follows, err)
	return _c
}

func (_c *MockUserCacheDAI_GetFollowings_Call) RunAndReturn(run func(ctx context.Context, userId int64, paging *model.Paging) ([]*model.Follow, error)) *MockUserCacheDAI_GetFollowings_Call {
	_c.Call.Return(run)
	return _c
}

// SetCachedUser provides a mock function for the type MockUserCacheDAI
func (_mock *MockUserCacheDAI) SetCachedUser(ctx context.Context, user *model.User) error {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SetCachedUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) error); ok {
		r0 = returnFunc(ctx, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserCacheDAI_SetCachedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCachedUser'
type MockUserCacheDAI_SetCachedUser_Call struct {
	*mock.Call
}

// SetCachedUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUserCacheDAI_Expecter) SetCachedUser(ctx interface{}, user interface{}) *MockUserCacheDAI_SetCachedUser_Call {
	return &MockUserCacheDAI_SetCachedUser_Call{Call: _e.mock.On("SetCachedUser", ctx, user)}
}

func (_c *MockUserCacheDAI_SetCachedUser_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserCacheDAI_SetCachedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserCacheDAI_SetCachedUser_Call) Return(err error) *MockUserCacheDAI_SetCachedUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserCacheDAI_SetCachedUser_Call) RunAndReturn(run func(ctx context.Context, user *model.User) error) *MockUserCacheDAI_SetCachedUser_Call {
	_c.Call.Return(run)
	return _c
}
