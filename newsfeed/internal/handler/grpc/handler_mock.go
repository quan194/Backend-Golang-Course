// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grpc

import (
	"context"

	"ep.k16/newsfeed/internal/service/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Follow provides a mock function for the type MockUserService
func (_mock *MockUserService) Follow(ctx context.Context, userId int64, peerId int64) (*model.Follow, error) {
	ret := _mock.Called(ctx, userId, peerId)

	if len(ret) == 0 {
		panic("no return value specified for Follow")
	}

	var r0 *model.Follow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) (*model.Follow, error)); ok {
		return returnFunc(ctx, userId, peerId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) *model.Follow); ok {
		r0 = returnFunc(ctx, userId, peerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Follow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = returnFunc(ctx, userId, peerId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Follow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Follow'
type MockUserService_Follow_Call struct {
	*mock.Call
}

// Follow is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - peerId int64
func (_e *MockUserService_Expecter) Follow(ctx interface{}, userId interface{}, peerId interface{}) *MockUserService_Follow_Call {
	return &MockUserService_Follow_Call{Call: _e.mock.On("Follow", ctx, userId, peerId)}
}

func (_c *MockUserService_Follow_Call) Run(run func(ctx context.Context, userId int64, peerId int64)) *MockUserService_Follow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserService_Follow_Call) Return(follow *model.Follow, err error) *MockUserService_Follow_Call {
	_c.Call.Return(follow, err)
	return _c
}

func (_c *MockUserService_Follow_Call) RunAndReturn(run func(ctx context.Context, userId int64, peerId int64) (*model.Follow, error)) *MockUserService_Follow_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowings provides a mock function for the type MockUserService
func (_mock *MockUserService) GetFollowings(ctx context.Context, userId int64, paging *model.Paging) ([]*model.Follow, error) {
	ret := _mock.Called(ctx, userId, paging)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowings")
	}

	var r0 []*model.Follow
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *model.Paging) ([]*model.Follow, error)); ok {
		return returnFunc(ctx, userId, paging)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *model.Paging) []*model.Follow); ok {
		r0 = returnFunc(ctx, userId, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Follow)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, *model.Paging) error); ok {
		r1 = returnFunc(ctx, userId, paging)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetFollowings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowings'
type MockUserService_GetFollowings_Call struct {
	*mock.Call
}

// GetFollowings is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - paging *model.Paging
func (_e *MockUserService_Expecter) GetFollowings(ctx interface{}, userId interface{}, paging interface{}) *MockUserService_GetFollowings_Call {
	return &MockUserService_GetFollowings_Call{Call: _e.mock.On("GetFollowings", ctx, userId, paging)}
}

func (_c *MockUserService_GetFollowings_Call) Run(run func(ctx context.Context, userId int64, paging *model.Paging)) *MockUserService_GetFollowings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *model.Paging
		if args[2] != nil {
			arg2 = args[2].(*model.Paging)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserService_GetFollowings_Call) Return(follows []*model.Follow, err error) *MockUserService_GetFollowings_Call {
	_c.Call.Return(follows, err)
	return _c
}

func (_c *MockUserService_GetFollowings_Call) RunAndReturn(run func(ctx context.Context, userId int64, paging *model.Paging) ([]*model.Follow, error)) *MockUserService_GetFollowings_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockUserService
func (_mock *MockUserService) Login(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUserService_Expecter) Login(ctx interface{}, user interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", ctx, user)}
}

func (_c *MockUserService_Login_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(user1 *model.User, err error) *MockUserService_Login_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(ctx context.Context, user *model.User) (*model.User, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function for the type MockUserService
func (_mock *MockUserService) Signup(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type MockUserService_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - ctx context.Context
//   - user *model.User
func (_e *MockUserService_Expecter) Signup(ctx interface{}, user interface{}) *MockUserService_Signup_Call {
	return &MockUserService_Signup_Call{Call: _e.mock.On("Signup", ctx, user)}
}

func (_c *MockUserService_Signup_Call) Run(run func(ctx context.Context, user *model.User)) *MockUserService_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.User
		if args[1] != nil {
			arg1 = args[1].(*model.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_Signup_Call) Return(user1 *model.User, err error) *MockUserService_Signup_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *MockUserService_Signup_Call) RunAndReturn(run func(ctx context.Context, user *model.User) (*model.User, error)) *MockUserService_Signup_Call {
	_c.Call.Return(run)
	return _c
}

// Unfollow provides a mock function for the type MockUserService
func (_mock *MockUserService) Unfollow(ctx context.Context, userId int64, peerId int64) error {
	ret := _mock.Called(ctx, userId, peerId)

	if len(ret) == 0 {
		panic("no return value specified for Unfollow")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = returnFunc(ctx, userId, peerId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_Unfollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unfollow'
type MockUserService_Unfollow_Call struct {
	*mock.Call
}

// Unfollow is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - peerId int64
func (_e *MockUserService_Expecter) Unfollow(ctx interface{}, userId interface{}, peerId interface{}) *MockUserService_Unfollow_Call {
	return &MockUserService_Unfollow_Call{Call: _e.mock.On("Unfollow", ctx, userId, peerId)}
}

func (_c *MockUserService_Unfollow_Call) Run(run func(ctx context.Context, userId int64, peerId int64)) *MockUserService_Unfollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUserService_Unfollow_Call) Return(err error) *MockUserService_Unfollow_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_Unfollow_Call) RunAndReturn(run func(ctx context.Context, userId int64, peerId int64) error) *MockUserService_Unfollow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostService creates a new instance of MockPostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostService {
	mock := &MockPostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostService is an autogenerated mock type for the PostService type
type MockPostService struct {
	mock.Mock
}

type MockPostService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostService) EXPECT() *MockPostService_Expecter {
	return &MockPostService_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function for the type MockPostService
func (_mock *MockPostService) CreatePost(ctx context.Context, post *model.Post) (*model.Post, error) {
	ret := _mock.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *model.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Post) (*model.Post, error)); ok {
		return returnFunc(ctx, post)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *model.Post) *model.Post); ok {
		r0 = returnFunc(ctx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *model.Post) error); ok {
		r1 = returnFunc(ctx, post)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostService_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockPostService_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - post *model.Post
func (_e *MockPostService_Expecter) CreatePost(ctx interface{}, post interface{}) *MockPostService_CreatePost_Call {
	return &MockPostService_CreatePost_Call{Call: _e.mock.On("CreatePost", ctx, post)}
}

func (_c *MockPostService_CreatePost_Call) Run(run func(ctx context.Context, post *model.Post)) *MockPostService_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *model.Post
		if args[1] != nil {
			arg1 = args[1].(*model.Post)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPostService_CreatePost_Call) Return(post1 *model.Post, err error) *MockPostService_CreatePost_Call {
	_c.Call.Return(post1, err)
	return _c
}

func (_c *MockPostService_CreatePost_Call) RunAndReturn(run func(ctx context.Context, post *model.Post) (*model.Post, error)) *MockPostService_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewsfeed provides a mock function for the type MockPostService
func (_mock *MockPostService) GetNewsfeed(ctx context.Context, userId int, paging model.Paging) ([]*model.Post, error) {
	ret := _mock.Called(ctx, userId, paging)

	if len(ret) == 0 {
		panic("no return value specified for GetNewsfeed")
	}

	var r0 []*model.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, model.Paging) ([]*model.Post, error)); ok {
		return returnFunc(ctx, userId, paging)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, model.Paging) []*model.Post); ok {
		r0 = returnFunc(ctx, userId, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, model.Paging) error); ok {
		r1 = returnFunc(ctx, userId, paging)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostService_GetNewsfeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewsfeed'
type MockPostService_GetNewsfeed_Call struct {
	*mock.Call
}

// GetNewsfeed is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int
//   - paging model.Paging
func (_e *MockPostService_Expecter) GetNewsfeed(ctx interface{}, userId interface{}, paging interface{}) *MockPostService_GetNewsfeed_Call {
	return &MockPostService_GetNewsfeed_Call{Call: _e.mock.On("GetNewsfeed", ctx, userId, paging)}
}

func (_c *MockPostService_GetNewsfeed_Call) Run(run func(ctx context.Context, userId int, paging model.Paging)) *MockPostService_GetNewsfeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 model.Paging
		if args[2] != nil {
			arg2 = args[2].(model.Paging)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPostService_GetNewsfeed_Call) Return(posts []*model.Post, err error) *MockPostService_GetNewsfeed_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *MockPostService_GetNewsfeed_Call) RunAndReturn(run func(ctx context.Context, userId int, paging model.Paging) ([]*model.Post, error)) *MockPostService_GetNewsfeed_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostByUserID provides a mock function for the type MockPostService
func (_mock *MockPostService) GetPostByUserID(ctx context.Context, userId int, paging model.Paging) ([]*model.Post, error) {
	ret := _mock.Called(ctx, userId, paging)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByUserID")
	}

	var r0 []*model.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, model.Paging) ([]*model.Post, error)); ok {
		return returnFunc(ctx, userId, paging)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, model.Paging) []*model.Post); ok {
		r0 = returnFunc(ctx, userId, paging)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, model.Paging) error); ok {
		r1 = returnFunc(ctx, userId, paging)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostService_GetPostByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostByUserID'
type MockPostService_GetPostByUserID_Call struct {
	*mock.Call
}

// GetPostByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int
//   - paging model.Paging
func (_e *MockPostService_Expecter) GetPostByUserID(ctx interface{}, userId interface{}, paging interface{}) *MockPostService_GetPostByUserID_Call {
	return &MockPostService_GetPostByUserID_Call{Call: _e.mock.On("GetPostByUserID", ctx, userId, paging)}
}

func (_c *MockPostService_GetPostByUserID_Call) Run(run func(ctx context.Context, userId int, paging model.Paging)) *MockPostService_GetPostByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 model.Paging
		if args[2] != nil {
			arg2 = args[2].(model.Paging)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPostService_GetPostByUserID_Call) Return(posts []*model.Post, err error) *MockPostService_GetPostByUserID_Call {
	_c.Call.Return(posts, err)
	return _c
}

func (_c *MockPostService_GetPostByUserID_Call) RunAndReturn(run func(ctx context.Context, userId int, paging model.Paging) ([]*model.Post, error)) *MockPostService_GetPostByUserID_Call {
	_c.Call.Return(run)
	return _c
}
