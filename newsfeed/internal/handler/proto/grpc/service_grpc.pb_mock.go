// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package grpc

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockServiceClient creates a new instance of MockServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceClient {
	mock := &MockServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceClient is an autogenerated mock type for the ServiceClient type
type MockServiceClient struct {
	mock.Mock
}

type MockServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceClient) EXPECT() *MockServiceClient_Expecter {
	return &MockServiceClient_Expecter{mock: &_m.Mock}
}

// CreatePost provides a mock function for the type MockServiceClient
func (_mock *MockServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *CreatePostResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CreatePostRequest, ...grpc.CallOption) (*CreatePostResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *CreatePostRequest, ...grpc.CallOption) *CreatePostResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreatePostResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *CreatePostRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceClient_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockServiceClient_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - ctx context.Context
//   - in *CreatePostRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) CreatePost(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_CreatePost_Call {
	return &MockServiceClient_CreatePost_Call{Call: _e.mock.On("CreatePost",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_CreatePost_Call) Run(run func(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption)) *MockServiceClient_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *CreatePostRequest
		if args[1] != nil {
			arg1 = args[1].(*CreatePostRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServiceClient_CreatePost_Call) Return(createPostResponse *CreatePostResponse, err error) *MockServiceClient_CreatePost_Call {
	_c.Call.Return(createPostResponse, err)
	return _c
}

func (_c *MockServiceClient_CreatePost_Call) RunAndReturn(run func(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)) *MockServiceClient_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// Follow provides a mock function for the type MockServiceClient
func (_mock *MockServiceClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Follow")
	}

	var r0 *FollowResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *FollowRequest, ...grpc.CallOption) (*FollowResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *FollowRequest, ...grpc.CallOption) *FollowResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FollowResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *FollowRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceClient_Follow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Follow'
type MockServiceClient_Follow_Call struct {
	*mock.Call
}

// Follow is a helper method to define mock.On call
//   - ctx context.Context
//   - in *FollowRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) Follow(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_Follow_Call {
	return &MockServiceClient_Follow_Call{Call: _e.mock.On("Follow",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_Follow_Call) Run(run func(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption)) *MockServiceClient_Follow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *FollowRequest
		if args[1] != nil {
			arg1 = args[1].(*FollowRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServiceClient_Follow_Call) Return(followResponse *FollowResponse, err error) *MockServiceClient_Follow_Call {
	_c.Call.Return(followResponse, err)
	return _c
}

func (_c *MockServiceClient_Follow_Call) RunAndReturn(run func(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)) *MockServiceClient_Follow_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowers provides a mock function for the type MockServiceClient
func (_mock *MockServiceClient) GetFollowers(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetFollowers")
	}

	var r0 *GetFollowersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetFollowersRequest, ...grpc.CallOption) (*GetFollowersResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetFollowersRequest, ...grpc.CallOption) *GetFollowersResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetFollowersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetFollowersRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceClient_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type MockServiceClient_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetFollowersRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) GetFollowers(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_GetFollowers_Call {
	return &MockServiceClient_GetFollowers_Call{Call: _e.mock.On("GetFollowers",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_GetFollowers_Call) Run(run func(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption)) *MockServiceClient_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetFollowersRequest
		if args[1] != nil {
			arg1 = args[1].(*GetFollowersRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServiceClient_GetFollowers_Call) Return(getFollowersResponse *GetFollowersResponse, err error) *MockServiceClient_GetFollowers_Call {
	_c.Call.Return(getFollowersResponse, err)
	return _c
}

func (_c *MockServiceClient_GetFollowers_Call) RunAndReturn(run func(ctx context.Context, in *GetFollowersRequest, opts ...grpc.CallOption) (*GetFollowersResponse, error)) *MockServiceClient_GetFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// GetFollowings provides a mock function for the type MockServiceClient
func (_mock *MockServiceClient) GetFollowings(ctx context.Context, in *GetFollowingsRequest, opts ...grpc.CallOption) (*GetFollowingsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetFollowings")
	}

	var r0 *GetFollowingsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetFollowingsRequest, ...grpc.CallOption) (*GetFollowingsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetFollowingsRequest, ...grpc.CallOption) *GetFollowingsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetFollowingsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetFollowingsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceClient_GetFollowings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowings'
type MockServiceClient_GetFollowings_Call struct {
	*mock.Call
}

// GetFollowings is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetFollowingsRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) GetFollowings(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_GetFollowings_Call {
	return &MockServiceClient_GetFollowings_Call{Call: _e.mock.On("GetFollowings",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_GetFollowings_Call) Run(run func(ctx context.Context, in *GetFollowingsRequest, opts ...grpc.CallOption)) *MockServiceClient_GetFollowings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetFollowingsRequest
		if args[1] != nil {
			arg1 = args[1].(*GetFollowingsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServiceClient_GetFollowings_Call) Return(getFollowingsResponse *GetFollowingsResponse, err error) *MockServiceClient_GetFollowings_Call {
	_c.Call.Return(getFollowingsResponse, err)
	return _c
}

func (_c *MockServiceClient_GetFollowings_Call) RunAndReturn(run func(ctx context.Context, in *GetFollowingsRequest, opts ...grpc.CallOption) (*GetFollowingsResponse, error)) *MockServiceClient_GetFollowings_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewsfeed provides a mock function for the type MockServiceClient
func (_mock *MockServiceClient) GetNewsfeed(ctx context.Context, in *GetNewsfeedRequest, opts ...grpc.CallOption) (*GetNewsfeedResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetNewsfeed")
	}

	var r0 *GetNewsfeedResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetNewsfeedRequest, ...grpc.CallOption) (*GetNewsfeedResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetNewsfeedRequest, ...grpc.CallOption) *GetNewsfeedResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetNewsfeedResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetNewsfeedRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceClient_GetNewsfeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewsfeed'
type MockServiceClient_GetNewsfeed_Call struct {
	*mock.Call
}

// GetNewsfeed is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetNewsfeedRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) GetNewsfeed(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_GetNewsfeed_Call {
	return &MockServiceClient_GetNewsfeed_Call{Call: _e.mock.On("GetNewsfeed",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_GetNewsfeed_Call) Run(run func(ctx context.Context, in *GetNewsfeedRequest, opts ...grpc.CallOption)) *MockServiceClient_GetNewsfeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetNewsfeedRequest
		if args[1] != nil {
			arg1 = args[1].(*GetNewsfeedRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServiceClient_GetNewsfeed_Call) Return(getNewsfeedResponse *GetNewsfeedResponse, err error) *MockServiceClient_GetNewsfeed_Call {
	_c.Call.Return(getNewsfeedResponse, err)
	return _c
}

func (_c *MockServiceClient_GetNewsfeed_Call) RunAndReturn(run func(ctx context.Context, in *GetNewsfeedRequest, opts ...grpc.CallOption) (*GetNewsfeedResponse, error)) *MockServiceClient_GetNewsfeed_Call {
	_c.Call.Return(run)
	return _c
}

// GetPosts provides a mock function for the type MockServiceClient
func (_mock *MockServiceClient) GetPosts(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 *GetPostsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetPostsRequest, ...grpc.CallOption) (*GetPostsResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *GetPostsRequest, ...grpc.CallOption) *GetPostsResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetPostsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *GetPostsRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceClient_GetPosts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPosts'
type MockServiceClient_GetPosts_Call struct {
	*mock.Call
}

// GetPosts is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetPostsRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) GetPosts(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_GetPosts_Call {
	return &MockServiceClient_GetPosts_Call{Call: _e.mock.On("GetPosts",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_GetPosts_Call) Run(run func(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption)) *MockServiceClient_GetPosts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *GetPostsRequest
		if args[1] != nil {
			arg1 = args[1].(*GetPostsRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServiceClient_GetPosts_Call) Return(getPostsResponse *GetPostsResponse, err error) *MockServiceClient_GetPosts_Call {
	_c.Call.Return(getPostsResponse, err)
	return _c
}

func (_c *MockServiceClient_GetPosts_Call) RunAndReturn(run func(ctx context.Context, in *GetPostsRequest, opts ...grpc.CallOption) (*GetPostsResponse, error)) *MockServiceClient_GetPosts_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockServiceClient
func (_mock *MockServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *LoginResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *LoginRequest, ...grpc.CallOption) (*LoginResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *LoginRequest, ...grpc.CallOption) *LoginResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LoginResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *LoginRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceClient_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockServiceClient_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - in *LoginRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) Login(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_Login_Call {
	return &MockServiceClient_Login_Call{Call: _e.mock.On("Login",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_Login_Call) Run(run func(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption)) *MockServiceClient_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *LoginRequest
		if args[1] != nil {
			arg1 = args[1].(*LoginRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServiceClient_Login_Call) Return(loginResponse *LoginResponse, err error) *MockServiceClient_Login_Call {
	_c.Call.Return(loginResponse, err)
	return _c
}

func (_c *MockServiceClient_Login_Call) RunAndReturn(run func(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)) *MockServiceClient_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function for the type MockServiceClient
func (_mock *MockServiceClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 *SignupResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SignupRequest, ...grpc.CallOption) (*SignupResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SignupRequest, ...grpc.CallOption) *SignupResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SignupResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SignupRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceClient_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type MockServiceClient_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - ctx context.Context
//   - in *SignupRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) Signup(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_Signup_Call {
	return &MockServiceClient_Signup_Call{Call: _e.mock.On("Signup",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_Signup_Call) Run(run func(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption)) *MockServiceClient_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SignupRequest
		if args[1] != nil {
			arg1 = args[1].(*SignupRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServiceClient_Signup_Call) Return(signupResponse *SignupResponse, err error) *MockServiceClient_Signup_Call {
	_c.Call.Return(signupResponse, err)
	return _c
}

func (_c *MockServiceClient_Signup_Call) RunAndReturn(run func(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)) *MockServiceClient_Signup_Call {
	_c.Call.Return(run)
	return _c
}

// Unfollow provides a mock function for the type MockServiceClient
func (_mock *MockServiceClient) Unfollow(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Unfollow")
	}

	var r0 *UnfollowResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *UnfollowRequest, ...grpc.CallOption) (*UnfollowResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *UnfollowRequest, ...grpc.CallOption) *UnfollowResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UnfollowResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *UnfollowRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceClient_Unfollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unfollow'
type MockServiceClient_Unfollow_Call struct {
	*mock.Call
}

// Unfollow is a helper method to define mock.On call
//   - ctx context.Context
//   - in *UnfollowRequest
//   - opts ...grpc.CallOption
func (_e *MockServiceClient_Expecter) Unfollow(ctx interface{}, in interface{}, opts ...interface{}) *MockServiceClient_Unfollow_Call {
	return &MockServiceClient_Unfollow_Call{Call: _e.mock.On("Unfollow",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockServiceClient_Unfollow_Call) Run(run func(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption)) *MockServiceClient_Unfollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *UnfollowRequest
		if args[1] != nil {
			arg1 = args[1].(*UnfollowRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockServiceClient_Unfollow_Call) Return(unfollowResponse *UnfollowResponse, err error) *MockServiceClient_Unfollow_Call {
	_c.Call.Return(unfollowResponse, err)
	return _c
}

func (_c *MockServiceClient_Unfollow_Call) RunAndReturn(run func(ctx context.Context, in *UnfollowRequest, opts ...grpc.CallOption) (*UnfollowResponse, error)) *MockServiceClient_Unfollow_Call {
	_c.Call.Return(run)
	return _c
}
